
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdministrator == true;
      allow write: if request.auth.uid == userId || (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdministrator == true);
    }
    
    match /roles/{roleId} {
      allow read: if request.auth != null;
      // Allow writes if the user is authenticated. 
      // For production, it's better to check for an admin claim in the auth token.
      allow write: if request.auth != null;
    }

    match /apps/{appId} {
      allow read: if request.auth != null;
       // Allow writes if the user is authenticated. 
      allow write: if request.auth != null;
    }
    
    match /favorites/{favoriteId} {
      // Users can only manage their own favorites
      allow read, write: if request.auth.uid == request.resource.data.userId;
    }

    match /counters/{counterId} {
        allow read: if request.auth != null;
        // Allow writes if the user is authenticated. 
        allow write: if request.auth != null;
    }

    match /request_headers/{headerId} {
      allow read, write: if request.auth != null;
    }

    match /request_positions/{positionId} {
      allow read, write: if request.auth != null;
    }

    match /catalogs_admin/{catalogId} {
        allow read: if request.auth != null;
        // Allow writes if the user is authenticated. 
        allow write: if request.auth != null;
    }
  }
}
